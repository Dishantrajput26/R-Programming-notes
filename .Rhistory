library(ggplot2)
# Create a frequency table for the 'cyl' column
cyl_table <- table(mtcars$cyl)
# Bar chart
bar_chart <- ggplot(data = data.frame(cyl = names(cyl_table), freq = cyl_table),
aes(x = cyl, y = freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Number of Cylinders", y = "Frequency",
title = "Bar Chart: Number of Cylinders in mtcars")
# Display the chart
bar_chart
scatter_plot <- ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "orange") +
labs(x = "Horsepower", y = "Miles per Gallon",
title = "Scatter Plot: MPG vs. Horsepower")
scatter_plot
box_plot <- ggplot(mtcars, aes(x = as.factor(am), y = mpg)) +
geom_boxplot(fill = "lightgreen") +
labs(x = "Transmission Type", y = "Miles per Gallon",
title = "Box Plot: MPG by Transmission Type")
box_plot
library(flexdashboard)
library(dplyr)
library(ggplot2)
# Create a frequency table for the 'cyl' column
cyl_table <- table(mtcars$cyl)
# Bar chart
bar_chart <- ggplot(data = data.frame(cyl = names(cyl_table), freq = cyl_table),
aes(x = cyl, y = freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Number of Cylinders", y = "Frequency",
title = "Bar Chart: Number of Cylinders in mtcars")
# Display the chart
bar_chart
# Bar chart
bar_chart <- ggplot(data = data.frame(cyl = names(cyl_table), freq = cyl_table),
aes(x = cyl, y = freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Number of Cylinders", y = "Frequency",
title = "Bar Chart: Number of Cylinders in mtcars")
# Create a frequency table for the 'cyl' column
cyl_table <- table(mtcars$cyl)
# Bar chart
bar_chart <- ggplot(data = data.frame(cyl = names(cyl_table), freq = cyl_table),
aes(x = cyl, y = freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Number of Cylinders", y = "Frequency",
title = "Bar Chart: Number of Cylinders in mtcars")
# Display the chart
bar_chart
pie_chart <- ggplot(mtcars, aes(x = "", fill = as.factor(vs))) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(fill = "Car Type", title = "Pie Chart: Distribution of Car Types")
pie_chart
library(flexdashboard)
library(dplyr)
library(ggplot2)
# Create a frequency table for the 'cyl' column
cyl_table <- table(mtcars$cyl)
pie_chart <- ggplot(mtcars, aes(x = "", fill = as.factor(vs))) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(fill = "Car Type", title = "Pie Chart: Distribution of Car Types")
pie_chart
library(flexdashboard)
library(dplyr)
library(ggplot2)
# Create a frequency table for the 'cyl' column
cyl_table <- table(mtcars$cyl)
box_plot <- ggplot(mtcars, aes(x = as.factor(am), y = mpg)) +
geom_boxplot(fill = "lightgreen") +
labs(x = "Transmission Type", y = "Miles per Gallon",
title = "Box Plot: MPG by Transmission Type")
box_plot
pie_chart <- ggplot(mtcars, aes(x = "", fill = as.factor(vs))) +
geom_bar(width = 1) +
coord_polar(theta = "y") +
labs(fill = "Car Type", title = "Pie Chart: Distribution of Car Types")
pie_chart
library(mt)
#matrix- matrix is just a two-dimensional array:
m <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=3,ncol=4)
m
m <- matrix(c(1,2,3,4,5,6,7,8,9,10,11,12),nrow=3,ncol=2)#warning data length differs from size of matrix
m
n <- matrix(data=c(101:112),nrow=3,ncol=4)
n
n[3,3]
# create two dataframes
df1 <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A", "B", "C", "D", "E")
)
df2 <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A", "B", "C", "D", "E")
)
df3 <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A", "B", "C", "D", "E")
)
# merge them into a single dataframe
df <- cbind(df1, df2, df3)
df
# Load necessary libraries (if not already loaded)
library(ggplot2)
# Create sample dataframes (replace with your actual data)
df1 <- data.frame(x = 1:10, y = rnorm(10))
df2 <- data.frame(x = 11:20, y = rnorm(10))
# List of dataframes
df_list <- list(df1, df2)
# Plot columns from each dataframe
graph <- lapply(df_list, function(df) {
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "steelblue", size = 3) +
labs(x = "X-axis", y = "Y-axis", title = "Scatterplot")
})
# Print the plots
print(graph)
library(ggplot2)
View(iris)
ggplot(data=iris)#screen will be there but no output
#so add next layer after data layer aesthetics, includes axis
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
#geometries=which type of plot you need, bargraph,scatter,line etc
p<-ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
p+geom_point()
#facet layer is not mandatory all other pending layers are not mand
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+
geom_point()+facet_wrap(~Species)
#geometries=which type of plot you need, bargraph,scatter,line etc
p<-ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
p+geom_point()
#so add next layer after data layer aesthetics, includes axis
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
#geometries=which type of plot you need, bargraph,scatter,line etc
p<-ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
p+geom_point()
#facet layer is not mandatory all other pending layers are not mand
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+
geom_point()+facet_wrap(~Species)
#so add next layer after data layer aesthetics, includes axis
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
#geometries=which type of plot you need, bargraph,scatter,line etc
p<-ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))
p+geom_point()
#statistics layer allows you to plot statistical values
#Claculated from the data
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+
geom_point()+facet_wrap(~Species)+geom_smooth(method="lm")
#cordinate layer:allows you to adjust x and y axis
library(dplyr)
#cordinate layer:allows you to adjust x and y axis
library(dplyr)
ggplot(filter(iris,Species=="setosa"),
aes(x=Sepal.Length,y=Sepal.Width))+
geom_point()+
coord_cartesian(xlim=c(4,8),ylim=c(2,5))
#theme
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+
geom_point()+facet_wrap(~Species)+geom_smooth(method="lm")+
theme(axis.text=element_text(color = "green",size=14))
#________________________________
#***   SCATTERPLOTS    ***#
ggplot(data=iris, aes(y=Petal.Length,
x=Sepal.Length))+geom_point()
ggplot(data=iris, aes(y=Petal.Length,
x=Sepal.Length,col=Species))+geom_point()
ggplot(data=iris, aes(y=Petal.Length, x=Sepal.Length,
shape=Species))+geom_point()
ggplot(data=iris, aes(y=Petal.Length, x=Sepal.Length, col=Species,
shape=Species))+geom_point()
#-------------------------------------------------------------
library(ggplot2)
#functions
#syntax-function(arguments) body
#where arguments is a set of symbol names (and, optionally, default values) that will
#be defined within the body of the function, and body is an R expression. Typically,
#the body is enclosed in curly braces, but it does not have to be if the body is a single
#expression.
#1 Printing the power of 2, of all numbers from 1 to 5
name <- function() {
for(i in 1:5){
print(i^2)
}
}
name()
#****************************
#2. find exponential of a number
#call the function by using arguments
expo<-function(a,b){
paste(a^b)
}
expo(2,4)
add<-function(a,b){
paste("addition of two numbers is:",a+b)
}
a<-as.integer(readline())
add(a,b)
#****************************************
#4.multiplication(call the function by name of the arguments)
multi<-function(a,b,c){
paste("multiplication of numbers is:",a*b*c)
}
multi(a=3,b=5,c=10)
sub<-function(a=20,b){
paste("subtraction of numbers is:",a-b)
}
sub(4,5)
#6 lazy evaluation of the function  -
#print a, expo of a by 2, b by passing one argument while calling
fun1<-function(a,b){
print(a)
print(a^2)
print(b)
}
fun1(6) # error
fun1(4,2)
#7 mixing of named and unnamed arguments
fun1<-function(a,b){
print(a/b)
}
fun1(b=10,20)
# previous is 20 /10
fun1(a=10,20) # 10/20
calsqr=function(y)
y*y
calsqr(5)
areacir=function(pi=3.14,r){
ar=pi*r*r
paste("area of circle=",ar)}
areacir(r=5)
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 2 * i
cat("2 *", i, "=", result, "\n")
}
}
printTableOf2()
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 2:10 * i
cat("2 *", i, "=", result, "\n")
}
}
printTableOf2()
result <- 1:10* i
cat("2 *", i, "=", result, "\n")
for (i in 1:10) {
result <- 1:10* i
cat("2 *", i, "=", result, "\n")
}
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 1:10* i
cat("2 *", i, "=", result, "\n")
}
}
printTableOf2()
cat("1:10 *", i, "=", result, "\n")
for (i in 1:10) {
result <- 1:10* i
cat("1:10 *", i, "=", result, "\n")
}
cat(i, "=", result, "\n")
for (i in 1:10) {
result <- 1:10* i
cat(i, "=", result, "\n")
}
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 1:10* i
cat(i, "=", result, "\n")
}
}
printTableOf2()
cat(i,result, "\n")
for (i in 1:10) {
result <- 1:10* i
cat(i,result, "\n")
}
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 1:10* i
cat(i,result, "\n")
}
}
printTableOf2()
result <- 2:10* i
cat(i,result, "\n")
for (i in 1:10) {
result <- 2:10* i
cat(i,result, "\n")
}
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 2:10* i
cat(i,result, "\n")
}
}
printTableOf2()
result <- 1:10* i
cat(i,result, "\n")
for (i in 1:10) {
result <- 1:10* i
cat(i,result, "\n")
}
#****************************************************
#10 table of a number
printTableOf2 <- function() {
for (i in 1:10) {
result <- 1:10* i
cat(i,result, "\n")
}
}
printTableOf2()
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
pie(x,labels)
#--------------------------------------------------
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
pie(x,labels,main="Title")
#------------------------------------------------------
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
pie(x,labels,main="GRAPH",
col=c("Red","Orange","Blue","Yellow"))
#-------------------------------------------
install.packages("plotrix")
library(plotrix)#3D plotting
x<-c(600,300,150,100,200)
pie3D(x,main="3D",labels=c("A","B","C","D","E"),
col=c("red","orange","yellow","blue","green"))
#------------------------------------------------------
x<-c(23,56,20,63)
labels<-c("A","B","C","D")
pie(x,labels,main="GRAPH",
col=c("Red","Orange","Blue","Yellow"))
pie3D(x,labels,main="GRAPH",
col=c("Red","Orange","Blue","Yellow"))
pie3D(x,labels,main="GRAPH",
col=c("Red","Orange","Blue","Yellow"))
pie(x,labels,main="GRAPH",
col=c("Red","Orange","Blue","Yellow"))
#Consider that you have the data displayed on the table below:
x<-c(1,2,3,4,5)
y<-c(200,400,600,700,500)
plot(x, y, type = "l")
#The style of the line graphs in R can be customized
#with the arguments of the function. As an example,
#the color and line width can be modified using the col and
#lwd arguments, respectively.
plot(x, y, type = "l",
col = "lightblue", # Color
lwd = 5)           # Line width
plot(x, y, type = "s", main = 'type = "s"')
plot(x, y, type = "b", main = 'type = "b"')
plot(x, y, type = "o", main = 'type = "o"')
#Consider that you have the data displayed on the table below:
x<-c(1,2,3,4,5)
y<-c(200,400,600,700,500)
plot(x, y, type = "l")
#The style of the line graphs in R can be customized
#with the arguments of the function. As an example,
#the color and line width can be modified using the col and
#lwd arguments, respectively.
plot(x, y, type = "l",
col = "lightblue", # Color
lwd = 5)           # Line width
plot(x, y, type = "b",
pch = LETTERS[1:5], # Letters as symbols
cex = 2,            # Size of the symbols
col = 1:5,          # pch colors
xlim = c(0, 6),     # X-axis limits
ylim = c(150, 750))
n <- matrix(data=c(101:112),nrow=3,ncol=4)
n
n[1:2,1:2]
n[1:2,]
n[3:4]
n[,3:4]
#barplots
#are the one of the most efficient ways of representing data
# They can be used to  summarize large data in visual form
#They have the ability to represent data that shows changes over
#time,which helps us to visualize trends
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp)
#---------------------------------
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result")
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue",
"wed","thur","fri",
"sat"),
col="Blue")
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212),
nrow=2,ncol=4)
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
legend("topleft",c("c1","c2"),fill=c("red","green"))
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212),
nrow=2,ncol=4)
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
legend("topleft",c("c1","c2"),fill=c("red","green"))
#horizontal graph instead of vertical
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue","wed","thur","fri","sat"),
col="Blue",density=10,horiz=TRUE)
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212),
nrow=2,ncol=4)
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
#to change texture of the graph by using density parameter
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue","wed","thur","fri","sat"),
col="Blue",density=10)
#horizontal graph instead of vertical
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue","wed","thur","fri","sat"),
col="Blue",density=10,horiz=TRUE)
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212),
nrow=2,ncol=4)
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red"))
,"green"
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue",
"wed","thur","fri",
"sat"),
col="Blue")
#to change texture of the graph by using density parameter
temp<-c(22,27,26,24,23,26,28)
result<-barplot(temp,main="Result",
xlab="x-axis",
ylab="y-axis",
names.arg = c("sun","mon","tue","wed","thur","fri","sat"),
col="Blue",density=10)
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212))
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
legend("topleft",c("c1","c2"),fill=c("red","green"))
#------------------------------------------------------
#stacked bar charts
#for that we need the data in matrix form
data<-matrix(c(122,203,167,118,528,178,673,212),
nrow=2,ncol=4)
data
result<-barplot(data,main="main title",xlab="class",
names.arg = c("Ist","2nd","3rd","4th")
, col=c("red","green"))
